cmdhistory=["(start-server)" "(stop-server)" "(start-server)" "(create-total-table)" "(sacuvajKorisnika \\"Ana\\" \\"anarankovic11@gmail.com\\")" "(vrati-korisnike)" "(create-total-table)" "(vrati-korisnike)" "(sacuvajKorisnika \\"Ana\\" \\"ana@gmail.com\\")" "(vrati-korisnike)" "(start-server)" "(create-total-table)" "(sacuvajKorisnika \\"Jelica\\" \\"jeca@gmail.com\\" \\"jeca\\")" "(vrati-korisnike)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(str \\"<h3 class\=\\\\\\"yt-lockup-title \\\\\\"><a href\=\\\\\\"\\")" "(str \\"title\=\\\\\\"Mix - \\")" "(count \\"ana\\")" "(def aa (str \\"<h3 class\=\\\\\\"yt-lockup-title \\\\\\"><a href\=\\\\\\"\\"))" "aa" "(count aa)" "(def bb (str \\"title\=\\\\\\"Mix - \\"))" "(count bb)" "(stop-server)" "(write-html-in-file)" "(write-youtube-links)" "(write-html-in-file)" "(str \\"<h3 class\=\\\\\\"yt-lockup-title \\\\\\"><a href\=\\\\\\"\\")" "(spit \\"ana.txt\\" (slurp \\"https\://www.youtube.com/\\"))" "(slurp \\"https\://www.youtube.com/\\")" "(start-server)" "(write-html-in-file)" "(str \\"\\\\\\" dir\=\\\\\\"ltr\\\\\\">\\")" "(count (str \\"\\\\\\" dir\=\\\\\\"ltr\\\\\\">\\"))" "(str \\"</a><span class\=\\\\\\"accessible-description\\")" "(write-html-in-file)" "(count break-tag)" "(write-html-in-file)" "(slurp \\"https\://www.youtube.com/\\")" "(def break-tag2\\r\\n  (str \\"</a><span class\=\\\\\\"accessible-description\\"))" "(def line (slurp \\"https\://www.youtube.com/\\"))" "(.indexOf line break-tag2)" "(write-html-in-file)" "(def linija (str \\"732568\\\\\\" dir\=\\\\\\"ltr\\\\\\">milica pavlovic - demantujem (cover)</a><span class\=\\\\\\"accessible-description\\\\\\" id\=\\\\\\"description-id\\"))" "(linija)" "(def a (str \\"Ana\\"))" "(a)" "(str \\"jds\\")" "(def uuuu \\n  (str \\"lol\\")\\n  )" "uuuu" "(uuuu)" "(clear-agent-errors)" "linija" "(def break-tag\\r\\n  \\"String after which comes YouTube link\\"\\r\\n  ;(str \\"<h3 class\=\\\\\\"yt-lockup-title \\\\\\"><a href\=\\\\\\"\\")\\r\\n  (str \\"\\\\\\" dir\=\\\\\\"ltr\\\\\\">\\"))" "break-tag" "(subs linija break-tag)" "(subs linija 3)" "(subs linija (.indexOf linija break-tag))" "(subs line (+ (.indexOf line break-tag) (count break-tag)))" "(subs linija (+ (.indexOf line break-tag) (count break-tag)))" "(subs linija (+ (.indexOf linija break-tag) (count break-tag)))" "(def break-tag2\\r\\n  (str \\"</a><span class\=\\\\\\"accessible-description\\"))" "break-tag2" "(subs linija (+ (.indexOf linija break-tag) (count break-tag)) (.indexOf linija break-tag2))" "break-tag2" "(subs linija (+ (.indexOf linija break-tag) (count break-tag)) (.indexOf linija break-tag2))" "(write-html-in-file)" "(subs linija break-tag)" "(subs linija (.indexOf break-tag))" "(subs linija 4)" "(subs linija (.indexOf linija break-tag))" "(def linija1 (str \\"</a><span class\=\\\\\\"accessible-description\\\\\\" id732568\\\\\\" dir\=\\\\\\"ltr\\\\\\">milica pavlovic - demantujem (cover)</a><span class\=\\\\\\"accessible-description\\\\\\" id\=\\\\\\"description-id\\"))" "linija1" "(subs linija (+ (.indexOf linija break-tag) (count break-tag)) (.indexOf linija break-tag2))" "(subs linija1 (+ (.indexOf linija1 break-tag) (count break-tag)) (.indexOf linija1 break-tag2))" "(.indexOf linija1 break-tag2)" "(.indexOf (subs linija1 break-tag) break-tag2)" "(subs linija1 break-tag)" "(subs linija1 (.indexOf linija1 break-tag))" "(subs linija1 (.indexOf linija1 break-tag) break-tag2)" "(write-html-in-file)" "(def yes (str \\"yLOLxANAy\\"))" "yes" "(subs yes (.indexOf yes \\"x\\"))" "(subs yes (.indexOf yes \\"x\\") (count \\"x\\"))" "(count \\"aa\\")" "(subs yes (+ (.indexOf yes \\"x\\") (count \\"x\\")))" "(subs yes (+ (.indexOf yes \\"x\\") (count \\"x\\")) (.lastIndexOf yes\\"y\\") \\n      )" "(subs yes (+ (.indexOf yes \\"x\\") (count \\"x\\")) (.lastIndexOf yes\\"y\\"))" "(subs linija1 (+ (.indexOf linija1 break-tag) (count break-tag)) (.lastIndexOf linija1 break-tag2))" "(write-html-in-file)" "(subs \\"Ana\\" \\"n\\")" "(subs \\"Ana\\" 2)" "(write-html-in-file)" "(str \\"s\\")" "(write-html-in-file)" "(break-tag)" "break-tag" "break-tag2" "(write-html-in-file)" "(use 'total.routes.home)" "(sacuvajUBazi \\"Anita\\" \\"An\\" \\"ita\\")" "(slurp \\"youtube-html.txt\\")" "(spit \\"youtube-links.txt\\")" "(slurp \\"youtube-links.txt\\")" "(sacuvajUBazi \\"Yo\\" \\"Yoo\\" (slurp \\"youtube-links.txt\\"))" "(slurp \\"youtube-links.txt\\")" "(with-open [rdr (reader \\"youtube-links.txt\\")]\\r\\n  (doseq [line (line-seq rdr)]\\r\\n    (println line)))" "(sacuvajUBazi \\"M\\" \\"M\\" (with-open [rdr (reader \\"youtube-links.txt\\")]\\r\\n  (doseq [line (line-seq rdr)]\\r\\n    (println line))))" "(with-open [rdr (reader \\"youtube-links.txt\\")]\\r\\n  (doseq [line (line-seq rdr)]\\r\\n    (println line)))" "(str (with-open [rdr (reader \\"youtube-links.txt\\")]\\r\\n  (doseq [line (line-seq rdr)]\\r\\n    (println line))))" "(str \\"a\\")" "(str (with-open [rdr (reader \\"youtube-links.txt\\")]\\r\\n  (doseq [line (line-seq rdr)]\\r\\n    (println line))))" "(sacuvajUBazi \\"e\\" \\"e\\" (str (with-open [rdr (reader \\"youtube-links.txt\\")]\\r\\n  (doseq [line (line-seq rdr)]\\r\\n    (println line)))))" "(sacuvajUBazi \\"Yo\\" \\"Yoo\\" (slurp \\"youtube-links.txt\\"))" "(write-html-in-file)" "(slurp \\"youtube-links.txt\\")" "(start-server)" "(create-total-table)" "(use 'total.file-content-manipulation)" "(write-html-in-file)" "(use 'total.repl)" "(start-server)" "(use 'total.file-content-manipulation)" "(write-html-in-file)" "(slurp \\"http\://appcrawlr.com/ios/last-fm\\")" "(subs (slurp \\"http\://appcrawlr.com/ios/last-fm\\") (.indexOf (slurp \\"http\://appcrawlr.com/ios/last-fm\\") \\";color\:\#333333\\\\\\">\\") (.indexOf (slurp \\"http\://appcrawlr.com/ios/last-fm\\") \\";color\:\#333333\\\\\\">2.5\\") )" "(str lastfm (slurp \\"http\://appcrawlr.com/ios/last-fm\\"))" "(def lastfm (slurp \\"http\://appcrawlr.com/ios/last-fm\\"))" "lastfm" "(def break \\";color\:\#333333\\\\\\">\\")" "break" "(subs lastfm break)" "(subs lastfm (.indexOf lastfm break))" "(subs lastfm (+ (.indexOf lastfm break) (count break)) (+ (.indexOf lastfm break) (+ (count break) 3)) )" "(def spotify (slurp \\"http\://appcrawlr.com/ios/spotify\\"))" "(subs spotify (+ (.indexOf spotify break) (count break)) (+ (.indexOf spotify break) (+ (count break) 3)) )" "(def soundcloud (slurp \\"http\://appcrawlr.com/ios/soundcloud\\"))" "(subs soundcloud (+ (.indexOf soundcloud break) (count break)) (+ (.indexOf soundcloud break) (+ (count break) 3)) )" "(start-server)" "(stop-server)" "(start-server)" "(def soundcloud\\r\\n  (slurp \\"http\://appcrawlr.com/ios/soundcloud\\"))" "(def soundcloud\\r\\n  (slurp \\"appcrawlr.com/ios/soundcloud\\"))" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(contains? \\"Ana\\" \\"a\\")" "(.contains \\"The Band Named Isis\\" \\"Isis\\")" "(count \\"akl;aka;\\")" "(create-total-table)" "(vrati-korisnike)" "(get-user \\"ana\\")" "(get-user \\"lo\\")" "(get-user \\"anarankovic11@gmail.com\\" \\"Ana\\")" "(get-user)" "(get-user \\"ana\\")" "(get-user \\"sa\\" \\"ds\\")" "(get-user \\"Ana\\")" "(use 'total.models.db)" "(get-user1 \\"Ana\\")" "(get-user1 \\"anarankovic11@gmail.com\\" \\"Ana\\")" "(get-user1 \\"anarankovic11@gmail.com\\" \\"A\\")" "(start-server)" "(use 'total.routes.home)" "(sacuvajUBazi \\"Ana\\" \\"anarankovic11@gmail.com\\" \\"AnaAna\\")" "(total.models.db/get-user1 \\"anarankovic11@gmail.com\\" \\"AnaAna\\")" "(\= (total.models.db/get-user1 \\"anarankovic11@gmail.com\\" \\"AnaAna\\") nil)" "(\= (\= (total.models.db/get-user1 \\"anarankovic11@gmail.com\\" \\"AnaAna\\") nil) false)" "(str \\"Ana\\")" "(sacuvajUBazi \\"\\" \\"\\" \\"\\")" "(get-user \\"AnaAna\\")" "(get-user1 \\"anarankovic11@gmail.com\\" \\"AnaAna\\")" "(get-user1 \\"anarankovic11@gmail.com\\" \\"AnaA\\")" "(cond\\n  (get-user1 \\"anarankovic11@gmail.com\\" \\"AnaAna\\")\\n  \:else\\n  (str \\"Ana\\")\\n)" "(cond\\r\\n  (\= (get-user1 \\"anarankovic11@gmail.com\\" \\"AnaA\\") nil?) (str \\"OOO\\") \\r\\n  \:else\\r\\n  (str \\"Ana\\")\\r\\n)" "(cond\\r\\n  (\= (get-user1 \\"anarankovic11@gmail.com\\" \\"AnaA\\") nil) (str \\"OOO\\") \\r\\n  \:else\\r\\n  (str \\"Ana\\")\\r\\n)" "(cond\\r\\n  (\= (get-user1 \\"anarankovic11@gmail.com\\" \\"AnaAna\\") nil) (str \\"Nema ga u bazi\\") \\r\\n  \:else\\r\\n  (str \\"Ana\\")\\r\\n)" "(cond\\r\\n  (\= (get-user1 \\"anarankovic11@gmail.com\\" \\"AnaA\\") nil) (str \\"OOO\\") \\r\\n  \:else\\r\\n  (str \\"Ana\\")\\r\\n)" "(cond\\r\\n  (\= (get-user1 \\"anarankovic11@gmail.com\\" \\"AnaAna\\") nil) (str \\"OOO\\") \\r\\n  \:else\\r\\n  (str \\"Postoji u bazi\\")\\r\\n)" "(cond\\r\\n     (\= (get-user1 \\"anarankovic11@gmail.com\\" \\"AaAna\\") nil) (str \\"OOO\\") \\r\\n     \:else\\r\\n     (str \\"Postoji u bazi\\")\\r\\n)" "(cond\\r\\n     (\= (get-user1 \\"anarankovic11@gmail.com\\" \\"AnaAna\\") nil) (str \\"Ne postoji u bazi\\") \\r\\n     \:else\\r\\n     (str \\"Postoji u bazi\\")\\r\\n)" "(cond\\r\\n     (\= (get-user1 \\"anarankovic11@gmail.com\\" \\"AnAna\\") nil) (str \\"Ne postoji u bazi\\") \\r\\n     \:else\\r\\n     (str \\"Postoji u bazi\\")\\r\\n)" "(cond\\r\\n     (\= (get-user1 \\"anarankovic11@gmail.com\\" \\"AnaAna\\") nil) (str \\"Ne postoji u bazi\\") \\r\\n     \:else\\r\\n     (str \\"Postoji u bazi\\")\\r\\n)" "(cond\\r\\n        (\= (get-user1 \\"anarankovic11@gmail.com\\" \\"AnaAna\\") nil) \\n        \\n       ((total.models.db/sacuvajKorisnika name mail password (slurp \\"youtube-links.txt\\"))\\n         (str \\"Ne postoji u bazi\\"))\\r\\n        \:else\\r\\n        (str \\"Postoji u bazi\\")\\r\\n   )" "(cond\\r\\n           (\= (get-user1 \\"anarankovic11@gmail.com\\" \\"AnaAna\\") nil) \\r\\n           \\r\\n          ((total.models.db/sacuvajKorisnika \\"yo\\" \\"yo\\" \\"yo\\" (slurp \\"youtube-links.txt\\"))\\r\\n            (str \\"Ne postoji u bazi\\"))\\r\\n           \:else\\r\\n           (str \\"Postoji u bazi\\")\\r\\n      )" "(cond\\r\\n              (\= (get-user1 \\"anarankovic11@gmail.com\\" \\"Anna\\") nil) \\r\\n              \\r\\n             ((total.models.db/sacuvajKorisnika \\"yo\\" \\"yo\\" \\"yo\\" (slurp \\"youtube-links.txt\\"))\\r\\n               (str \\"Ne postoji u bazi\\"))\\r\\n              \:else\\r\\n              (str \\"Postoji u bazi\\")\\r\\n         )" "(sacuvajUBazi \\"\\" \\"\\" \\"\\")" "(sacuvajUBazi \\"sa\\" \\"ed\\" \\"mk\\")" "(sacuvajUBazi \\"Branka\\" \\"Branka\\" \\"Branka\\")" "(use 'total.repl)" "(start-server)" "(use 'total.routes.home)" "(\!\= (total.models.db/get-user1 mail password) nil)" "(\= (total.models.db/get-user1 mail password) nil)" "(\= (total.models.db/get-user1 \\"A\\" \\"A\\") nil)" "(\!\= (total.models.db/get-user1 \\"A\\" \\"A\\") nil)" "(\= (total.models.db/get-user1 \\"A\\" \\"A\\") nil)" "(not\= (total.models.db/get-user1 \\"A\\" \\"A\\") nil)" "(\= (total.models.db/get-user1 \\"Branka\\" \\"Branka\\") nil)" "(not\= (total.models.db/get-user1 \\"Branka\\" \\"Branka\\") nil)" "(start-server)" "(get-user1 \\"Mjau\\" \\"MjauMjau\\")" "(get-user1 \\"Natasa\\" \\"Natasa\\")" "(get-user \\"Ana\\" \\"AnaAna\\")" "(get-user1 \\"Ana\\" \\"AnaAna\\")" "(get-user1 \\"anarankovic11@gmail.com\\" \\"AnaAna\\")" "(get-user \\"Ana\\" \\"AnaAna\\")" "(get-user \\"Branka\\" \\"Branka\\")" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(defn String->Number [str]\\r\\n  (let [n (read-string str)]\\r\\n       (if (number? n) n nil)))" "(String->Number \\"f3w\\")" "(String->Number \\"5\\")" "(String->Number \\"5.5.\\")" "(String->Number \\"5.5\\")" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(str line \\"cdskl;jkv;ldfjvlfvjl;jsv - fjldsfjlda;fkj;fjaf df\\")" "(str linija \\"edw\\\\cffdfdvdavf-cdfvdfvvfdvfdvf\\")" "(def line \\"dfewfa\\\\v\\\\vfvf - fkalsdkfjav;lj vjdflv\\")" "(def line \\"c\\")" "(def line \\"cdvddav - vferrvav - fvsv\\")" "(subs line (+ (.indexOf line \\"d\\") (count \\"d\\")) (.indexOf line \\"-\\"))" "(use 'total.file-content-manipulation)" "(write-html-in-file)" "(defn lolo []\\n  2+2)" "(defn lolo []\\r\\n     (+ 2 2))" "lolo" "(defn lolo [n]\\r\\n     (+ n n))" "(lolo 2)" "(defn lolo [n]\\r\\n  (def sta \\n    \\"Staaaa\\")   \\n  (+ n n)\\n  (sta))" "lolo" "(lolo 2)" "(defn lolo [n]\\r\\n     (def sta \\r\\n       \\"Staaaa\\")   \\r\\n     (+ n n)\\r\\n     (print sta))" "(lolo 2)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(spit \\"youtube-links.txt\\" \\r\\n  \\"aaaaa\\")" "(start-server)" "(use 'total.file-content-manipulation)" "(write-youtube-links \\"\\")" "(write-html-in-file)" "(use 'total.file-content-manipulation)" "(write-html-in-file)" "(start-server)" "(use total.file-content-manipulation)" "(use 'total.file-content-manipulation)" "(write-html-in-file)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(use 'total.file-content-manipulation)" "(write-html-in-file)" "(stop-server)" "(start-server)" "(stop-server)" "(write-html-in-file)" "(slurp \\"youtube-links.txt\\")" "(start-server)" "(defn write-youtube-links [yt-link]\\r\\n  \\"Writes YouTube links in file\\"\\r\\n  (spit \\"youtube-links.txt\\" \\r\\n        (str yt-link \\"\\\\n**********\\\\n\\") \:append true))" "(defn write-html-in-file []\\r\\n  \\"Writes YouTube page source in file\\"\\r\\n  (spit \\"youtube-html.txt\\" (slurp \\"https\://www.youtube.com/\\"))\\r\\n  (with-open [](doseq [line (line-seq (reader \\"youtube-html.txt\\"))]\\r\\n                 (if(.contains line break-tag2)\\n                   (def pocetak (+ (.indexOf line break-tag) (count break-tag)))\\r\\n                   (println (subs line (+ (.indexOf line break-tag) (count break-tag)) (.indexOf line break-tag2))\\r\\n                   (write-youtube-links (subs line pocetak (.indexOf pocetak \\"-\\")))\\n                   )))))" " (\:require [compojure.core \:refer \:all]\\r\\n            [total.views.layout \:as layout]\\r\\n            [hiccup.form \:refer \:all]\\r\\n            [noir.session \:as session]\\r\\n            [clojure.java.io \:as io])\\r\\n  (\:use clojure.java.io\\r\\n        clojure.java.browse)" " (\:require [compojure.core \:refer \:all]\\r\\n            [total.views.layout \:as layout]\\r\\n            [hiccup.form \:refer \:all]\\r\\n            [noir.session \:as session]\\r\\n            [clojure.java.io \:as io])" "(use 'total.file-content-manipulation)" "(write-html-in-file)" "(use 'total.file-content-manipulation)" "(write-html-in-file)" "(use 'total.file-content-manipulation)" "(write-html-in-file)" "(use 'total.file-content-manipulation)" "(write-html-in-file)" "(wrap-file-info)" "(use 'total.file-content-manipulation)" "(write-html-in-file)" "(.indexOf \\"Ana\\" \\"a\\")" "(write-html-in-file)" "(.indexOf \\"aaa-aaa\\" \\"-\\")" "(subs \\"sak;lsas;ads\\" (.indexOf \\"sak;lsas;ads\\" \\"-\\"))" "(subs \\"sak;lsas;ads\\" (.indexOf \\"sak;lsas;ads\\" \\";\\"))" "(subs \\"sak;lsas;ads\\"  (.indexOf \\"sak;lsas;ads\\" \\";\\"))" "(subs \\"sak;lsas;ads\\" 0 (.indexOf \\"sak;lsas;ads\\" \\";\\"))" "(write-html-in-file)" "  (slurp \\"youtube-links.txt\\")" "(use 'total.file-content-manipulation)" "(precisceno)" "(use 'total.file-content-manipulation)" "(write-html-in-file)" "(precisceno)" "(write-html-in-file)" "(spit \\"ana.txt\\")" "(slurp \\"ana.txt\\")" "(spit \\"ana.txt\\" \\"Ana\\")" "(write-html-in-file)" "(precisceno)" "(use 'total.file-content-manipulation)" "(precisceno)" "(write-html-in-file)" "(precisceno)" "(write-html-in-file)" "(precisceno)" "(start-server)" "(stop-server)" "(start-server)" "(use 'total.file-content-manipulation)" "(delete-youtube-links-file3)" "(delete-youtube-links-file2)" "(delete-youtube-links-file1)" "(start-server)" "{\\"Ana\\" 1}" " {1 \:a  2 \:b  3 \:c}" "\:a" "1" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(spit \\"jaa.txt\\" \\"Ana\\")" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(def xs (atom \#{}))" "(use 'clojure.java.io)\\r\\n               (with-open [rdr (reader \\"artists.txt\\")]\\r\\n                                                  (doseq [line (line-seq rdr)]\\r\\n                   (swap\! xs3 conj line)))" "(use 'clojure.java.io)\\r\\n               (with-open [rdr (reader \\"me.txt\\")]\\r\\n                                                  (doseq [line (line-seq rdr)]\\r\\n                   (swap\! xs conj line)))" "(use 'clojure.java.io)\\r\\n               (with-open [rdr (reader \\"artists.txt\\")]\\r\\n                                                  (doseq [line (line-seq rdr)]\\r\\n                   (swap\! xs conj line)))" "@xs" "(defn count-substring [txt sub]\\r\\n  (count (re-seq (re-pattern sub) txt)))" "(use 'clojure.java.io)\\r\\n   (with-open [rdr (reader \\"ana.txt\\")]\\r\\n                                      (doseq [line (line-seq rdr)]\\r\\n                                        ;(println line (count-substring (slurp \\"ana.txt\\") line)\\r\\n       (spit \\"me.txt\\" (str line \\" - \\"(count-substring (slurp \\"ana.txt\\") line) \\"\\\\n\\") \:append true)))" "(use 'clojure.java.io)\\r\\n   (with-open [rdr (reader \\"ana.txt\\")]\\r\\n                                      (doseq [line (line-seq rdr)]\\r\\n                                        ;(println line (count-substring (slurp \\"ana.txt\\") line)\\r\\n       (spit \\"ana.txt\\" (str line \\" - \\"(count-substring (slurp \\"ana.txt\\") line) \\"\\\\n\\") \:append true)))" "(use 'clojure.java.io)\\r\\n   (with-open [rdr (reader \\"artists.txt\\")]\\r\\n                                      (doseq [line (line-seq rdr)]\\r\\n                                        ;(println line (count-substring (slurp \\"ana.txt\\") line)\\r\\n       (spit \\"artists.txt\\" (str line \\" - \\"(count-substring (slurp \\"ana.txt\\") line) \\"\\\\n\\") \:append true)))" "(use 'clojure.java.io)\\r\\n      (with-open [rdr (reader \\"artists.txt\\")]\\r\\n                                         (doseq [line (line-seq rdr)]\\r\\n                                           ;(println line (count-substring (slurp \\"ana.txt\\") line)\\r\\n          (spit \\"artists.txt\\" (str line \\" - \\"(count-substring (slurp \\"artists.txt\\") line) \\"\\\\n\\") \:append true)))" "(stop-server)" "(start-server)" "(defn count-substring [txt sub]\\r\\n  (count (re-seq (re-pattern sub) txt)))" "(use 'clojure.java.io)\\r\\n   (with-open [rdr (reader \\"artist.txt\\")]\\r\\n                                      (doseq [line (line-seq rdr)]\\r\\n       (spit \\"me.txt\\" (str line \\" - \\"(count-substring (slurp \\"artist.txt\\") line) \\"\\\\n\\") \:append true)))" "(use 'clojure.java.io)\\r\\n   (with-open [rdr (reader \\"artists.txt\\")]\\r\\n                                      (doseq [line (line-seq rdr)]\\r\\n       (spit \\"me.txt\\" (str line \\" - \\"(count-substring (slurp \\"artists.txt\\") line) \\"\\\\n\\") \:append true)))" "(def izvodjaci (atom \#{}))" "(use 'clojure.java.io)\\r\\n                  (with-open [rdr (reader \\"me.txt\\")]\\r\\n                                                     (doseq [line (line-seq rdr)]\\r\\n                      (swap\! izvodjaci conj line)))" "@izvodjaci" "(spit \\"me.txt\\" \\r\\n               @izvodjaci)" "(stop-server)" "(spit \\"artists.txt\\" @izvodjaci)" "(stop-server)" "(start-server)" "(defn for-database []\\r\\n  (with-open [rdr (reader \\"artists2.txt\\")]\\r\\n    (doseq [line (line-seq rdr)]\\r\\n      (spit \\"me2.txt\\" (str line \\" - \\"(count-substring (slurp \\"artists2.txt\\") line) \\"\\\\n\\") \:append true))))" "(defn count-substring [txt sub]\\r\\n     (count (re-seq (re-pattern sub) txt)))" "(use 'clojure.java.io)" "  (with-open [rdr (reader \\"artists2.txt\\")]\\r\\n    (doseq [line (line-seq rdr)]\\r\\n      (spit \\"me2.txt\\" (str line \\" - \\"(count-substring (slurp \\"artists2.txt\\") line) \\"\\\\n\\") \:append true)))" "(def artists-number (atom \#{}))" "(with-open [rdr (reader \\"me2.txt\\")]\\r\\n    (doseq [line (line-seq rdr)]\\r\\n      (swap\! artists-number conj line)))" "@artists-number" "  (spit \\"me2.txt\\" \\r\\n        @artists-number)" "(stop-server)" "(start-server)" "(def artists-number (atom \#{}))" "(sort artists-number)" "(swap\! artists-number conj \\"Aaa\\")" "(swap\! artists-number conj \\"Aab\\")" "(swap\! artists-number conj \\"Dca\\")" "(swap\! artists-number conj \\"Cad\\")" "(swap\! artists-number conj \\"Dac\\")" "(sort artists-number)" "(sort @artists-number)" "(start-server)" " (spit \\"artists.txt\\" \\r\\n        @artists-number)" "(def artists-number (atom \#{}))" "(swap\! artists-number conj \\"A\\")" "(swap\! artists-number conj \\"D\\")" "(swap\! artists-number conj \\"C\\")" "(swap\! artists-number conj \\"A\\")" "(swap\! artists-number conj \\"B\\")" "(spit \\"artists.txt\\" \\r\\n        @artists-number)" "(swap\! artists-number conj \\"L\\")" "(swap\! artists-number conj \\"E\\")" "(stop-server)" "(start-server)" "(def artists-number (atom \#{}))" "  (with-open [rdr (reader \\"me.txt\\")]\\r\\n    (doseq [line (line-seq rdr)]\\r\\n      (swap\! artists-number conj line)))" "(use 'clojure.java.io)\\n(with-open [rdr (reader \\"me.txt\\")]\\r\\n    (doseq [line (line-seq rdr)]\\r\\n      (swap\! artists-number conj line)))" "@artists-number" "(subs @artists-number 2)" "(subs \\"Ana\\" 3)" "(subs \\"Ana\\" 2)" "(subs @artists-number 3)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server\\n  )" "(start-server)" "(stop-server)" "(start-server)" "(use 'total.file-content-manipulation)" "(@artists-number)" "@artists-number" " (hash-map \:key1 1, \:key1 2)" "\:key1" "1" "(sorted-map \:z 1, \:b 2, \:a 3)" "\:z" "(defn get-user-registration [mail password]\\r\\n  (sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results res\\r\\n    [\\"select * from total where mail \= ? and password \= ?\\" mail password] (first res))))" "(use 'total.models.db)" "(vrati-sve)" "(get-user-login \\"Branka\\" \\"Branka\\")" "(vrati-sve)" "(get-user-login \\"Branka\\" \\"Branka\\")" "(get-user-login \\"lolololo1\\" \\"lolololo1\\")" "(.contains (get-user-login \\"lolololo1\\" \\"lolololo1\\"))" "(.contains (get-user-login \\"lolololo1\\" \\"lolololo1\\") \\"Marko\\")" "(subs (get-user-login \\"lolololo1\\" \\"lolololo1\\") 2)" "(str (get-user-login \\"lolololo1\\" \\"lolololo1\\"))" "(subs (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko\\")" "(subs (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) 2)" "(.contains (get-user-login \\"lolololo1\\" \\"lolololo1\\") \\"Marko\\")" "(.contains (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko\\")" "(.contains (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u00C5\u00A1njak\\")" "(.contains (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\")" "(if (.contains (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\")\\n  1\\n  0\\n  )" "(if (.contains (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\")\\r\\n     (.indexOf (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\")\\r\\n     0\\r\\n     )" "(if (.contains (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\")\\r\\n        (subs \\"Ana\\" 0)\\r\\n        0\\r\\n        )" "(if (.contains (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\")\\r\\n           (subs \\"Ana\\" 2)\\r\\n           0\\r\\n           )" "(if (.contains (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\")\\r\\n           (subs (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\n                 (+ (.indexOf (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\") (count \\"Marko Bo\u0161njak\\"))\\n                 (+ (.indexOf (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\") (+ (count \\"Marko Bo\u0161njak\\") 4)) \\n          )\\r\\n           0\\r\\n           )" "(if (.contains (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\")\\r\\n           (subs (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\r\\n                 (+ (.indexOf (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\") (count \\"Marko Bo\u0161njak\\"))\\r\\n                 (+ (.indexOf (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\") (+ (count \\"Marko Bo\u0161njak\\") 2)) \\r\\n          )\\r\\n           0\\r\\n           )" "(if (.contains (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\")\\r\\n           (subs (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\r\\n                 (+ (.indexOf (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\") (+ (count \\"Marko Bo\u0161njak\\")3))\\r\\n                 (+ (.indexOf (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\") (+ (count \\"Marko Bo\u0161njak\\") 4)) \\r\\n          )\\r\\n           0\\r\\n           )" "(if (.contains (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Pedja Medenica i Rale\\")\\r\\n              (subs (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\r\\n                    (+ (.indexOf (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\") (+ (count \\"Marko Bo\u0161njak\\")3))\\r\\n                    (+ (.indexOf (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\") (+ (count \\"Marko Bo\u0161njak\\") 4)) \\r\\n             )\\r\\n              0\\r\\n              )" "(if (.contains (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Pedja Medenica i Rale\\")\\r\\n                 (subs (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\r\\n                       (+ (.indexOf (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Pedja Medenica i Rale\\") (+ (count \\"Pedja Medenica i Rale\\")3))\\r\\n                       (+ (.indexOf (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Pedja Medenica i Rale\\") (+ (count \\"Pedja Medenica i Rale\\") 4)) \\r\\n                )\\r\\n                 0\\r\\n                 )" "(vrati-sve 1)" "vrati-sve" "(vrati-sve 2)" "(vrati-sve 3)" "(\= (vrati-sve 1) nil \\n)" "(\= (vrati-sve 6) nil \\r\\n   )" "(defn vrati-sve-iz-baze [i]\\n  (not\= (vrati-sve 1) nil \\r\\n   ((vrati-sve i)\\n     (inc i)\\n     )\\n))" "(vrati-sve-iz-baze 1)" "(defn vrati-sve-iz-baze [i]\\r\\n     (if (not\= (vrati-sve 1) nil \\r\\n      ((vrati-sve i)\\r\\n        (inc i)\\r\\n        )\\r\\n   )))" "(if (not\= (vrati-sve 1) nil) \\n  (vrati-sve 1)\\n  )" "(if (not\= (vrati-sve 7) nil) \\r\\n     (vrati-sve 1)\\r\\n     )" "(while (not\= (vrati-sve i) nil)\\n  (do (vrati-sve i) \\n    (inc i)\\n    )\\n  )" "(while (not\= (vrati-sve 1) nil)\\r\\n     (do (vrati-sve 1) \\r\\n       (inc 1)\\r\\n       )\\r\\n     )" "\\"lol\\"" "(vrati-sve 1)" "(vrati-sve 2)" "(vrati-sve 1)" "(while (not\= (vrati-sve 1) nil)\\r\\n        (do (vrati-sve 1) \\r\\n          (inc 1)\\r\\n          )\\r\\n        )" "(not\= (vrati-sve 1) nil)" "\\"dw\\"" "(\= (vrati-sve 1) nil)" "(vrati-sve 5)" "(\= 1 i)" "(def a (atom 10))" "(while (pos? @a) (do (println @a) (swap\! a dec)))" "(def artists-number (atom \#{}))" "(spit \\"artists.txt\\" \\r\\n        @artists-number)" "@artists-number" "(swap\! artists-number conj \\"Ana\\")" "(swap\! artists-number conj \\"Marko\\")" "(swap\! artists-number conj \\"Milan\\")" "(swap\! artists-number conj \\"Ana\\")" "(swap\! artists-number conj \\"Luka\\")" "(swap\! artists-number conj \\"Bojana\\")" "(while (not\= @artists-number nil) (do (println @artists-number) (swap\! artists-number dec)))" "(not\= @artists-number nil)" "(println @artists-number)" "(swap\! artists-number dec)" "(swap\! artists-number disj)" "@artists-number" "(swap\! artists-number disj \\"Luka\\")" "(while (not\= @artists-number nil) (do (println @artists-number) (swap\! artists-number disj @artists-number)))" "(def i\\n  1)" "i" "(while (not\= (vrati-sve i) nil)\\r\\n        (do (vrati-sve i) \\r\\n          (inc i)\\r\\n          )\\r\\n        )" "(vrati-sve 2)" "(do (vrati-sve 1) \\r\\n          (inc 1)\\r\\n          )" "if" "i" "(def i\\r\\n     1)" "i" "(while (not\= (vrati-sve 1) nil)\\r\\n        (do (vrati-sve 1) \\r\\n          (inc 1)\\r\\n          )\\r\\n        )" "vrati-sve" "(vrati-sve 1)" "(vrati-sve 3)" "(for (< i 16)\\n  (* 2 i)\\n  )" "(for [i [1 2 3]] \\n  (vrati-sve i)\\n  )" "(for [i [1 2 3 4 5 6 7 8]] \\r\\n     (vrati-sve i)\\r\\n     )" "(for [i [1 2 3 4 5 6 7 8]] \\n (if (not\= (vrati-sve i) nil)\\r\\n        (vrati-sve i)\\r\\n        ))" "(for [i [1]] \\r\\n        (vrati-sve i)\\r\\n        (inc i)\\n        )" "(for [i [1]] \\r\\n           ((vrati-sve i)\\r\\n           (inc i))\\r\\n           )" "(for [i [1]] \\r\\n              (println (vrati-sve i)\\r\\n              (inc i))\\r\\n              )" "(for [i [1 2 3 4 5 6 7 8]] \\r\\n        (vrati-sve i)\\r\\n        )" "(vraca-sve-iz-baze)" "(.contains (str (vraca-sve-iz-baze)) \\"Pedja Medenica i Rale\\")" "(.contains (str (vrati-sve 5)) \\"NATASA BEKVALAC\\")" "(for [i [1 2 3 4 5 6 7 8]] \\r\\n        (i)\\r\\n)" "(for [i [1 2 3 4 5 6 7 8]] \\r\\n        (print i)\\r\\n)" "(if (.contains (str (vrati-sve 5)) \\"Pedja Medenica i Rale\\")\\r\\n                    (subs (str (vrati-sve 5)) \\r\\n                          (+ (.indexOf (str (vrati-sve 5)) \\"Pedja Medenica i Rale\\") (+ (count \\"Pedja Medenica i Rale\\")3))\\r\\n                          (+ (.indexOf (str (vrati-sve 5)) \\"Pedja Medenica i Rale\\") (+ (count \\"Pedja Medenica i Rale\\") 4)) \\r\\n                   )\\r\\n                    0\\r\\n                    )" "(if (.contains (str (vrati-sve 5)) \\"Milica Pavlovic\\")\\r\\n                       (subs (str (vrati-sve 5)) \\r\\n                             (+ (.indexOf (str (vrati-sve 5)) \\"Milica Pavlovic\\") (+ (count \\"Milica Pavlovic\\")3))\\r\\n                             (+ (.indexOf (str (vrati-sve 5)) \\"Milica Pavlovic\\") (+ (count \\"Milica Pavlovic\\") 4)) \\r\\n                      )\\r\\n                       0)" "(if (.contains (str (vrati-sve 5)) \\"Milica Pavlovic\\")\\r\\n                          (subs (str (vrati-sve 5)) \\r\\n                                (+ (.indexOf (str (vrati-sve 5)) \\"Milica Pavlovic\\") (+ (count \\"Milica Pavlovic\\")3))\\r\\n                                (+ (.indexOf (str (vrati-sve 5)) \\"\\\\\\" \\"\\\\\\") (+ (count \\"Milica Pavlovic\\") 4)) \\r\\n                         )\\r\\n                          0)" "(if (.contains (str (vrati-sve 5)) \\"Milica Pavlovic\\")\\r\\n                          (subs (str (vrati-sve 5)) \\r\\n                                (+ (.indexOf (str (vrati-sve 5)) \\"Milica Pavlovic\\") (+ (count \\"Milica Pavlovic\\")3))\\r\\n                                (+ (.indexOf (str (vrati-sve 5)) \\"Milica Pavlovic\\") (+ (count \\"Milica Pavlovic\\") 4)) \\r\\n                         )\\r\\n                          0)" "(if (.contains (str (vrati-sve 5)) \\"Milica Pavlovic\\")\\r\\n                          (subs (str (vrati-sve 5)) \\r\\n                                (+ (.indexOf (str (vrati-sve 5)) \\"Milica Pavlovic\\") (+ (count \\"Milica Pavlovic\\")3))\\r\\n                                (+ (.indexOf (str (vrati-sve 5)) \\"Milica Pavlovic\\") (+ (count \\"Milica Pavlovic\\") 5)) \\r\\n                         )\\r\\n                          0)" "(if (.contains (str (vrati-sve 5)) \\"Milica Pavlovic\\")\\r\\n                          (subs (str (vrati-sve 5)) \\r\\n                                (+ (.indexOf (str (vrati-sve 5)) \\"Milica Pavlovic\\") (+ (count \\"Milica Pavlovic\\")3))\\r\\n                                (+ (.indexOf (str (vrati-sve 5)) \\"Milica Pavlovic\\") (+ (count \\"Milica Pavlovic\\") 6)) \\r\\n                         )\\r\\n                          0)" "(integer? 1)" "(integer? \\"1\\")" "(defn parse-int [s]\\r\\n   (Integer. (re-find  \#\\"\\\\d+\\" s )))" "(parse-int \\"11\\\\\\")" "(parse-int \\"11\\")" "(if (parse-int \\"11\\")\\n  \\"A\\"\\n  \\"B\\")" "(if (parse-int \\"11s\\")\\r\\n  \\"A\\"\\r\\n  \\"B\\")" "(read-string \\"9\\")" "(read-string \\"9s\\")" "(for [i [1 2 3 4 5 6 7 8]] \\r\\n        (print i)\\n        (\\"Ana\\")\\r\\n)" "(for [i [1 2 3 4 5 6 7 8]] \\r\\n           ((print i)\\r\\n           (\\"Ana\\")\\r\\n   ))" "(vraca-sve-iz-baze)" "(broj-pojavljivanja 1)" "(if (.contains (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\")\\r\\n              (subs (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\r\\n                    (+ (.indexOf (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\") (+ (count \\"Marko Bo\u0161njak\\")3))\\r\\n                    (+ (.indexOf (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\") (+ (count \\"Marko Bo\u0161njak\\") 4)) \\r\\n             )\\r\\n              0\\r\\n              )" "(use 'total.models.db)" "(if (.contains (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\")\\r\\n              (subs (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\r\\n                    (+ (.indexOf (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\") (+ (count \\"Marko Bo\u0161njak\\")3))\\r\\n                    (+ (.indexOf (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\") (+ (count \\"Marko Bo\u0161njak\\") 4)) \\r\\n             )\\r\\n              0\\r\\n              )" "(if (.contains (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\")\\r\\n                 (subs (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\r\\n                       (+ (.indexOf (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\") (+ (count \\"Marko Bo\u0161njak\\")3))\\r\\n                       (+ (.indexOf (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\") (+ (count \\"Marko Bo\u0161njak\\") 5)) \\r\\n                )\\r\\n                 0\\r\\n                 )" "(if (.contains (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\")\\r\\n                 (subs (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\r\\n                       (+ (.indexOf (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\") (+ (count \\"Marko Bo\u0161njak\\")3))\\r\\n                       (+ (.indexOf (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\") (+ (count \\"Marko Bo\u0161njak\\") 6)) \\r\\n                )\\r\\n                 0\\r\\n                 )" "(if (.contains (str (total.models.db/vrati-sve 5)) \\"Marko Bo\u0161njak\\")\\r\\n                 (subs (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\r\\n                       (+ (.indexOf (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\") (+ (count \\"Marko Bo\u0161njak\\")3))\\r\\n                       (+ (.indexOf (str (get-user-login \\"lolololo1\\" \\"lolololo1\\")) \\"Marko Bo\u0161njak\\") (+ (count \\"Marko Bo\u0161njak\\") 5)) \\r\\n                )\\r\\n                 0\\r\\n                 )" "(if (.contains (str (total.models.db/vrati-sve 5)) \\"Marko Bo\u0161njak\\")\\r\\n                 (subs (str (total.models.db/vrati-sve 5)) \\r\\n                       (+ (.indexOf (str (total.models.db/vrati-sve 5)) \\"Marko Bo\u0161njak\\") (+ (count \\"Marko Bo\u0161njak\\")3))\\r\\n                       (+ (.indexOf (str (total.models.db/vrati-sve 5)) \\"Marko Bo\u0161njak\\") (+ (count \\"Marko Bo\u0161njak\\") 5)) \\r\\n                )\\r\\n                 0\\r\\n                 )" "(if (.contains (str (total.models.db/vrati-sve 5)) \\"Marko Bo\u0161njak\\")\\r\\n                    (subs (str (total.models.db/vrati-sve 5)) \\r\\n                          (+ (.indexOf (str (total.models.db/vrati-sve 5)) \\"Marko Bo\u0161njak\\") (+ (count \\"Marko Bo\u0161njak\\")3))\\r\\n                          (+ (.indexOf (str (total.models.db/vrati-sve 5)) \\"Marko Bo\u0161njak\\") (+ (count \\"Marko Bo\u0161njak\\") 6)) \\r\\n                   )\\r\\n                    0\\r\\n                    )" "(vraca-sve-iz-baze)" "(broj-pojavljivanja 5)" "(broj-pojavljivanja 2)" "(broj-pojavljivanja)" "(broj-pojavljivanja 2)" "(defn parse-int [s]\\r\\n   (Integer. (re-find  \#\\"\\\\d+\\" s )))" "(parse-int \\"1\\\\\\")" "(parse-int \\"1dew\\")" "(parse-int (broj-pojavljivanja 2))" "(broj-pojavljivanja 2)" "(start-server)" "(def artists-number (atom \#{}))" "(with-open [rdr (reader \\"me.txt\\")]\\r\\n    (doseq [line (line-seq rdr)]\\r\\n      (swap\! artists-number conj line)))" "(use 'clojure.java.io)" "(with-open [rdr (reader \\"me.txt\\")]\\r\\n    (doseq [line (line-seq rdr)]\\r\\n      (swap\! artists-number conj line)))" "(spit \\"artists.txt\\" \\r\\n        @artists-number)" "@artists-number" "(while (not\= @artists-number nil) (do (println @artists-number)))" "(def artists-number (atom \#{}))" "(swap\! artists-number conj \\"Ana\\")" "(swap\! artists-number conj \\"Marija\\")" "(swap\! artists-number conj \\"Sofija\\")" "artists-number" "@artists-number" "(println @artists-number\\n         )" "(vraca-sve-iz-baze)" "(for @artists-number\\n  (print \\"A\\"))" "(for [i (@artists-number)]\\n  (print i)\\n  )" "(for [i @artists-number]\\r\\n  (print i)\\r\\n  )" "(for [i (@artists-number)]\\r\\n  (println i)\\r\\n  )" "\\n(for [i @artists-number]\\r\\n     (println i)\\r\\n     )" "(for [i @artists-number]\\r\\n     (i)\\r\\n     )" "(for [i @artists-number]\\r\\n     (println i)\\r\\n     )" "@artists-number" "(for [i [@artists-number]]\\r\\n        (println i)\\r\\n        )" "(for [i @artists-number]\\r\\n        (println i)\\r\\n        )" "(prinln \\"Aaa\\")" "(for [i @artists-number]\\r\\n        (broj-pojavljivanja i)\\r\\n        )" "(swap\! artists-number conj \\"Sofija\\")" "(swap\! artists-number conj \\"Milica\\")" "(for [i @artists-number]\\r\\n           (broj-pojavljivanja i)\\r\\n           )" "(for [i @artists-number]\\r\\n           (broj-pojavljivanja 3)\\r\\n           )" "(for [i @artists-number]\\r\\n              (println (broj-pojavljivanja i)))" "(vraca-sve-iz-baze \\"Milica\\")" "(vraca-sve-iz-baze \\"Milica Pavlovic\\")" "(vraca-sve-iz-baze \\"Jelena Kostov\\")" "(clojure.string/split-lines \\"test \\\\n string\\")" "(for [i (clojure.string/split-lines \\"test \\\\n string\\")]\\r\\n        (println i)\\r\\n        )" "(for [i (clojure.string/split-lines \\"Milica Pavlovic \\\\n string\\")]\\r\\n           (vraca-sve-iz-baze i)\\r\\n           )" "(clojure.string/replace \\"The color is red\\" \#\\"red\\" \\"blue\\")" "(def artists-number (atom \#{}))" "(use 'clojure.java.io)" "(with-open [rdr (reader \\"me.txt\\")]\\r\\n    (doseq [line (line-seq rdr)]\\r\\n      (swap\! artists-number conj (line \\"\\\\n\\"))))" "(with-open [rdr (reader \\"me.txt\\")]\\r\\n       (doseq [line (line-seq rdr)]\\r\\n         (swap\! artists-number conj line)))" "(with-open [rdr (reader \\"me.txt\\")]\\r\\n       (doseq [line (line-seq rdr)]\\r\\n         (swap\! artists-number conj line \\"\\\\n\\")))" "@artists-number" "  (spit \\"artists.txt\\" \\r\\n        @artists-number)" "(def artists-number (atom \#{}))" "(with-open [rdr (reader \\"me.txt\\")]\\r\\n          (doseq [line (line-seq rdr)]\\r\\n            (swap\! artists-number conj line \\"\\\\n\\")))" "(use 'clojure.java.io)" "(with-open [rdr (reader \\"me.txt\\")]\\r\\n          (doseq [line (line-seq rdr)]\\r\\n            (swap\! artists-number conj line \\"\\\\n\\")))" "(spit \\"ana.txt\\" \\r\\n           @artists-number)" "(def artists (atom \#{}))" "(with-open [rdr (reader \\"ana.txt\\")]\\r\\n             (doseq [line (line-seq rdr)]\\r\\n               (swap\! artists conj line \\"\\\\n\\")))" "@artists" "(for [i @artists]\\r\\n        (println i)\\r\\n        )" "(for [i (clojure.string/split-lines (slurp \\"ana.txt\\"))]\\r\\n              (vraca-sve-iz-baze i)\\r\\n              )" "(distinct [\\"A\\" \\"A\\" \\"B\\"])" "(clojure.string/split-lines (slurp \\"ana.txt\\"))" "(distinct (clojure.string/split-lines (slurp \\"ana.txt\\")))" "(for [i (distinct (clojure.string/split-lines (slurp \\"ana.txt\\")))]\\r\\n                 (vraca-sve-iz-baze i)\\r\\n                 )" "(start-server)" "(use 'total.models.db)" "(for [i (distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))]\\r\\n                    (vraca-sve-iz-baze i)\\r\\n                    )" "(use 'total.algorithm)" "(for [i (distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))]\\r\\n                    (vraca-sve-iz-baze i)\\r\\n                    )" "(distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))" "(for [i (distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))]\\r\\n                       (spit \\"vektori.txt\\" (vraca-sve-iz-baze i)\\r\\n                       ))" "(for [i (distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))]\\r\\n                          (spit \\"vektori.txt\\" (str (vraca-sve-iz-baze i))\\r\\n                          ))" "(for [i (distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))]\\r\\n                          (vraca-sve-iz-baze i))" "(for [i (distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))]\\r\\n                          (spit \\"vektori.txt\\" (str (vraca-sve-iz-baze i)) \:append true))" "(for [i (distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))]\\r\\n                          (spit \\"vektori.txt\\" (vraca-sve-iz-baze i) \\"\\\\n\\" \:append true))" "(for [i (distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))]\\r\\n                             (spit \\"vektori.txt\\" ((vraca-sve-iz-baze i) \\"\\\\n\\") \:append true))" "(vraca-sve-iz-baze 1)" "(vraca-sve-iz-baze \\"Milica Pavlovic\\")" "(str (vraca-sve-iz-baze \\"Milica Pavlovic\\"))" "(spit \\"vektori.txt\\" (vraca-sve-iz-baze \\"Milica Pavlovic\\"))" "(map (vraca-sve-iz-baze \\"Milica Pavlovic\\"))" "(vector (vraca-sve-iz-baze \\"Milica Pavlovic\\"))" "(spit \\"vektori.txt\\" (vector (vraca-sve-iz-baze \\"Milica Pavlovic\\")))" "(for [i (distinct (clojure.string/split-lines (slurp \\"ana.txt\\")))]\\r\\n                    (vraca-sve-iz-baze i)\\r\\n                    )" "(for [i (distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))]\\r\\n                       (vraca-sve-iz-baze i)\\r\\n                       )" "(for [i (distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))]\\r\\n                          (spit \\"vektori.txt\\" (vector (vraca-sve-iz-baze \\"Milica Pavlovic\\")))\\r\\n                          )" "(for [i (distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))]\\r\\n                             (spit \\"vektori.txt\\" (vector (vraca-sve-iz-baze i)) \:append true)\\r\\n                             )" "(for [i (distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))]\\r\\n                             (spit \\"vektori.txt\\" (vector (vraca-sve-iz-baze i)) \\"\\\\n\\" \:append true)\\r\\n                             )" "(for [i (distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))]\\r\\n                             (spit \\"vektori.txt\\" ((vector (vraca-sve-iz-baze i)) \\"\\\\n\\") \:append true)\\r\\n                             )" "(for [i (distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))]\\r\\n                             (spit \\"vektori.txt\\" (vector (vraca-sve-iz-baze i)) \:append true)\\r\\n                             )" "(for [i (distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))]\\r\\n                             (spit \\"vektori.txt\\" (vector (vraca-sve-iz-baze i)) \\"\\\\n\\" \:append true)\\r\\n                             )" "(for [i (distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))]\\r\\n                             (spit \\"vektori.txt\\" ((vector (vraca-sve-iz-baze i)) \\"\\\\n\\") \:append true)\\r\\n                             )" "(for [i (distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))]\\r\\n                             (spit \\"vektori.txt\\" (str (vector (vraca-sve-iz-baze i)) \\"\\\\n\\") \:append true)\\r\\n                             )" "(for [i (distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))]\\r\\n                             (spit \\"vektori.txt\\" (vector (vraca-sve-iz-baze i)) \\"\\\\n\\" \:append true)\\r\\n                             )" "(for [i (distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))]\\r\\n                             (spit \\"vektori.txt\\" (vector (vraca-sve-iz-baze i)) \:append true)\\r\\n                             )" "(for [i (distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))]\\r\\n                                (spit \\"vektori.txt\\" (str (vector (vraca-sve-iz-baze i)) \\"\\\\n\\") \:append true)\\r\\n                                )" "(delete-youtube-links-file)" "(start-server)" "(stop-server)" "(use 'total.file-content-manipulation)" "(delete-youtube-links-file)" "(start-server)" "(use 'total.file-content-manipulation)" "(write-html-in-file)" "(start-server)" "(stop-server)" "(use 'total.file-content-manipulation)" "(delete-youtube-links-file)" "(start-server)" "(stop-server)" "(for [i (distinct (clojure.string/split-lines (slurp \\"artists.txt\\")))]\\r\\n                                   (spit \\"vektori.txt\\" (str (vector (vraca-sve-iz-baze i)) \\"\\\\n\\") \:append true)\\r\\n                                   )" "(start-server)" "(use 'total.algorithm)" "(vraca-sve-iz-baze)" "(vectors-in-file)" "(clojure.string/split-lines (slurp \\"vektori.txt\\"))" "(for [i (clojure.string/split-lines (slurp \\"vektori.txt\\"))]\\r\\n                                      )" "(use 'clojure.java.io)\\n(with-open [rdr (reader \\"vektori.txt\\")]\\r\\n    (doseq [line (line-seq rdr)]\\r\\n      (println (subs line 2 3))))" "(use 'clojure.java.io)\\r\\n   (with-open [rdr (reader \\"vektori.txt\\")]\\r\\n       (doseq [line (line-seq rdr)]\\r\\n         (println (subs line 2 (.indexOf line \\" \\")))))" "(use 'clojure.java.io)\\r\\n      (with-open [rdr (reader \\"vektori.txt\\")]\\r\\n          (doseq [line (line-seq rdr)]\\r\\n            (parse-int (subs line 2 (.indexOf line \\" \\")))))" "(use 'clojure.java.io)\\r\\n      (with-open [rdr (reader \\"vektori.txt\\")]\\r\\n          (doseq [line (line-seq rdr)]\\r\\n            (println (parse-int (subs line 2 (.indexOf line \\" \\"))))))" "(defn sum [& args] (apply + args))" "(use 'clojure.java.io)\\r\\n         (with-open [rdr (reader \\"vektori.txt\\")]\\r\\n             (doseq [line (line-seq rdr)]\\r\\n               (sum (parse-int (subs line 2 (.indexOf line \\" \\"))))))" "sum" "(sum)" "(def my-atom (atom 0))" "(use 'clojure.java.io)\\r\\n         (with-open [rdr (reader \\"vektori.txt\\")]\\r\\n             (doseq [line (line-seq rdr)]\\r\\n               (swap\! my-atom (parse-int (subs line 2 (.indexOf line \\" \\"))))))" "(swap\! my-atom 3)" "(swap\! my-atom (str 1))" "(use 'clojure.java.io)\\r\\n         (with-open [rdr (reader \\"vektori.txt\\")]\\r\\n             (doseq [line (line-seq rdr)]\\r\\n               (swap\! my-atom conj (parse-int (subs line 2 (.indexOf line \\" \\"))))))" "@my-atom" "(swap\! my-atom (+ @my-atom 2))" "(swap\! my-atom (+ @my-atom @my-atom))" "(swap\! my-atom \#(+ % 3))" "(use 'clojure.java.io)\\r\\n         (with-open [rdr (reader \\"vektori.txt\\")]\\r\\n             (doseq [line (line-seq rdr)]\\r\\n               (swap\! my-atom \#(+ % (parse-int (subs line 2 (.indexOf line \\" \\")))))))" "@my-atom" "(def atom1 (atom 0))" "(def atom2 (atom 0))" "(def atom3 (atom 0))" "(def atom4 (atom 0))" "(def atom5 (atom 0))" "(def atom6 (atom 0))" "(def atom7 (atom 0))" "(def atom8 (atom 0))" "(use 'clojure.java.io)\\r\\n            (with-open [rdr (reader \\"vektori.txt\\")]\\r\\n                (doseq [line (line-seq rdr)]\\r\\n                  (swap\! atom1 \#(+ % (parse-int (subs line 2 (.indexOf line \\" \\")))))\\n                  (swap\! atom1 \#(+ % (parse-int (subs line 2 (.indexOf line \\" \\")))))\\n                  ))" "@atom1" "(reset\! atom1 0)" "@atom" "@atom1" "(def ana\\n  \\"ana\\")" "ana" "(use 'clojure.java.io)\\r\\n               (with-open [rdr (reader \\"vektori.txt\\")]\\n                 (def jedan\\n                   (subs line 2 (.indexOf line \\" \\")))\\n                 \\r\\n                   (doseq [line (line-seq rdr)]\\r\\n                     (swap\! atom1 \#(+ % (parse-int jedan)))\\r\\n                     (swap\! atom2 \#(+ % (parse-int (subs line (.indexOf line jedan) (.indexOf line \\" \\")))))\\r\\n))" "(use 'clojure.java.io)\\r\\n                  (with-open [rdr (reader \\"vektori.txt\\")]\\r\\n                      (doseq [line (line-seq rdr)]\\n                        (def jedan\\r\\n                         (subs line 2 (.indexOf line \\" \\")))\\r\\n                        (swap\! atom1 \#(+ % (parse-int jedan)))\\r\\n                        (swap\! atom2 \#(+ % (parse-int (subs line (.indexOf line jedan) (.indexOf line \\" \\")))))\\r\\n   ))" "@atom1" "@atom2" "(use 'clojure.java.io)\\r\\n                     (with-open [rdr (reader \\"vektori.txt\\")]\\r\\n                         (doseq [line (line-seq rdr)]\\r\\n                              (def jedan\\r\\n                            (subs line 2 (.indexOf line \\" \\")))\\r\\n                           (println jedan)\\r\\n                           (println (subs line (.indexOf line jedan) (.indexOf line \\" \\")))))" "(def nesto\\n  \\"[(0 0 1 0 0 0 0 0)]\\")" "nesto" "(subs nesto 2 (.indexOf nesto \\" \\"))" "(def jedan\\n  (subs nesto 2 (.indexOf nesto \\" \\")))" "jedan" "(def dva\\n  (subs nesto jedan (.indexOf jedan \\" \\")))" "(def dva\\r\\n     (subs nesto jedan (.indexOf nesto \\" \\")))" "(def dva\\r\\n     (subs nesto (.indexOf nesto jedan) (.indexOf jedan \\" \\")))" "(replace-first nesto \\" \\" \\"\\")" "(clojure.string/replace-first nesto \\" \\" \\"\\")" "(def nesto\\r\\n     \\"[(0 0 1 0 0 0 0 0)]\\")" "(def jedan\\r\\n     (subs nesto 2 (.indexOf nesto \\" \\"))\\n     (clojure.string/replace-first nesto \\" \\" \\"\\"))" "(defn jedan []\\r\\n        (subs nesto 2 (.indexOf nesto \\" \\"))\\r\\n        (clojure.string/replace-first nesto \\" \\" \\"\\"))" "jedan" "(jedan)" "@atom1" "@atom2" "@atom3" "(reset\! atom1 0)" "(reset\! atom2 0)" "(use 'clojure.java.io)\\r\\n               (with-open [rdr (reader \\"vektori.txt\\")]\\r\\n                   (doseq [line (line-seq rdr)]\\r\\n                     (swap\! atom1 \#(+ % (parse-int (subs line 2 (.indexOf line \\" \\")))))\\r\\n\\t\\t\\t(clojure.string/replace-first line \\" \\" \\"\\")\\r\\n                     (swap\! atom2 \#(+ % (parse-int (subs line 2 (.indexOf line \\" \\")))))\\r\\n\\t\\t\\t(clojure.string/replace-first line \\" \\" \\"\\")\\r\\n                     (swap\! atom3 \#(+ % (parse-int (subs line 2 (.indexOf line \\" \\")))))\\r\\n(clojure.string/replace-first line \\" \\" \\"\\")                     \\r\\n(swap\! atom4 \#(+ % (parse-int (subs line 2 (.indexOf line \\" \\")))))\\r\\n(clojure.string/replace-first line \\" \\" \\"\\")\\r\\n                     (swap\! atom5 \#(+ % (parse-int (subs line 2 (.indexOf line \\" \\")))))\\r\\n(clojure.string/replace-first line \\" \\" \\"\\")\\r\\n                     (swap\! atom6 \#(+ % (parse-int (subs line 2 (.indexOf line \\" \\")))))\\r\\n(clojure.string/replace-first line \\" \\" \\"\\")\\r\\n                     (swap\! atom7 \#(+ % (parse-int (subs line 2 (.indexOf line \\" \\")))))\\r\\n(clojure.string/replace-first line \\" \\" \\"\\")\\r\\n                     (swap\! atom8 \#(+ % (parse-int (subs line 2 (.indexOf line \\" \\")))))))" "@atom8" "@atom5" "@my-atom" "(reset\! my-atom 0)" "(use 'clojure.java.io)\\r\\n            (with-open [rdr (reader \\"vektori.txt\\")]\\r\\n                (doseq [line (line-seq rdr)]\\r\\n                  (swap\! my-atom \#(+ % (parse-int (subs line 2 (.indexOf line \\" \\")))))))" "@my-atom" "(replace jedan \\" \\" \\"\\")" "(clojure.string/replace-first jedan \\" \\" \\"\\")" "jedan" "(jedan)" "(clojure.string/replace jedan \\" \\" \\"\\")" "(jedan)" "(println (clojure.string/replace jedan \\" \\" \\"\\"))" "(def jjjj\\n  \\"[(0 0 1 0 0 0 0 0)]\\")" "(replace jjjj \\" \\" \\"\\")" "jjjj" "(clojure.string/replace jjjj \\" \\" \\"\\")" "(use 'clojure.java.io)\\r\\n            (with-open [rdr (reader \\"vektori.txt\\")]\\r\\n                (doseq [line (line-seq rdr)]\\n                  (clojure.string/replace line \\" \\" \\"\\")\\r\\n                  (swap\! atom1 \#(+ % (parse-int (subs line 2 3))))\\n                  (swap\! atom2 \#(+ % (parse-int (subs line 3 4))))\\r\\n                  (swap\! atom3 \#(+ % (parse-int (subs line 4 5))))\\r\\n                  (swap\! atom4 \#(+ % (parse-int (subs line 5 6))))\\n                  (swap\! atom4 \#(+ % (parse-int (subs line 5 6))))\\n                  ))" "@atom" "@atom1" "(reset\! @atom1)" "(reset\! @atom1 0)" "(reset\! atom1 0)" "(reset\! atom2 0)" "(reset\! atom3 0)" "(reset\! atom4 0)" "(reset\! atom5 0)" "(reset\! atom6 0)" "(reset\! atom7 0)" "(reset\! atom8 0)" "(use 'clojure.java.io)\\r\\n               (with-open [rdr (reader \\"vektori.txt\\")]\\r\\n                   (doseq [line (line-seq rdr)]\\r\\n                     (clojure.string/replace line \\" \\" \\"\\")\\r\\n                     (swap\! atom1 \#(+ % (parse-int (subs line 2 3))))\\r\\n                     (swap\! atom2 \#(+ % (parse-int (subs line 3 4))))\\r\\n                     (swap\! atom3 \#(+ % (parse-int (subs line 4 5))))\\r\\n                     (swap\! atom4 \#(+ % (parse-int (subs line 5 6))))\\r\\n                     (swap\! atom5 \#(+ % (parse-int (subs line 6 7))))\\r\\n                     (swap\! atom6 \#(+ % (parse-int (subs line 7 8))))\\r\\n                     (swap\! atom7 \#(+ % (parse-int (subs line 8 9))))\\r\\n                     (swap\! atom8 \#(+ % (parse-int (subs line 9 10))))\\r\\n                     ))" "@atom1" "@quot" "@atom2" "(use 'clojure.java.io)\\r\\n                  (with-open [rdr (reader \\"vektori.txt\\")]\\r\\n                      (doseq [line (line-seq rdr)]\\r\\n                        (clojure.string/replace line \\" \\" \\"\\")\\r\\n(print line)                        \\n            ))" "(use 'clojure.java.io)\\r\\n                     (with-open [rdr (reader \\"vektori.txt\\")]\\r\\n                         (doseq [line (line-seq rdr)]\\r\\n                           (def ll (clojure.string/replace line \\" \\" \\"\\"))\\r\\n   (print ll)                        \\r\\n               ))" "(use 'clojure.java.io)\\r\\n                  (with-open [rdr (reader \\"vektori.txt\\")]\\r\\n                      (doseq [line (line-seq rdr)]\\r\\n                        (def no-space (clojure.string/replace line \\" \\" \\"\\"))\\n                        (swap\! atom1 \#(+ % (parse-int (subs no-space 2 3))))\\r\\n                        (swap\! atom2 \#(+ % (parse-int (subs no-space 3 4))))\\r\\n                        (swap\! atom3 \#(+ % (parse-int (subs no-space 4 5))))\\r\\n                        (swap\! atom4 \#(+ % (parse-int (subs no-space 5 6))))\\r\\n                        (swap\! atom5 \#(+ % (parse-int (subs no-space 6 7))))\\r\\n                        (swap\! atom6 \#(+ % (parse-int (subs no-space 7 8))))\\r\\n                        (swap\! atom7 \#(+ % (parse-int (subs no-space 8 9))))\\r\\n                        (swap\! atom8 \#(+ % (parse-int (subs no-space 9 10))))\\r\\n                        ))" "@atom" "@atom1" "@atom2" "(use 'clojure.java.io)\\r\\n                     (with-open [rdr (reader \\"vektori.txt\\")]\\r\\n                         (doseq [line (line-seq rdr)]\\r\\n                           (def no-space (clojure.string/replace-first line \\" \\" \\"\\"))\\r\\n                           (swap\! atom1 \#(+ % (parse-int (subs no-space 2 3))))\\n                           (def no-space (clojure.string/replace-first line \\" \\" \\"\\"))\\r\\n                           (swap\! atom2 \#(+ % (parse-int (subs no-space (-(.indexOf no-space \\" \\") 1) (.indexOf no-space \\" \\")))))\\n                           (def no-space (clojure.string/replace-first line \\" \\" \\"\\"))\\r\\n                           (swap\! atom3 \#(+ % (parse-int (subs no-space 4 5))))\\n                           (def no-space (clojure.string/replace-first line \\" \\" \\"\\"))\\r\\n                           (swap\! atom4 \#(+ % (parse-int (subs no-space 5 6))))\\n                           (def no-space (clojure.string/replace-first line \\" \\" \\"\\"))\\r\\n                           (swap\! atom5 \#(+ % (parse-int (subs no-space 6 7))))\\n                           (def no-space (clojure.string/replace-first line \\" \\" \\"\\"))\\r\\n                           (swap\! atom6 \#(+ % (parse-int (subs no-space 7 8))))\\n                           (def no-space (clojure.string/replace-first line \\" \\" \\"\\"))\\r\\n                           (swap\! atom7 \#(+ % (parse-int (subs no-space 8 9))))\\n                           (def no-space (clojure.string/replace-first line \\" \\" \\"\\"))\\r\\n                           (swap\! atom8 \#(+ % (parse-int (subs no-space 9 10))))\\n                           (def no-space (clojure.string/replace-first line \\" \\" \\"\\"))\\r\\n                           ))" "@atom2" "(use 'clojure.java.io)\\r\\n                     (with-open [rdr (reader \\"vektori.txt\\")]\\r\\n                         (doseq [line (line-seq rdr)]\\r\\n                           (def no-space (clojure.string/replace line \\" \\" \\"\\"))\\r\\n                           (swap\! atom1 \#(+ % (parse-int (subs no-space 2 3))))\\r\\n                           (swap\! atom2 \#(+ % (parse-int (subs no-space 3 4))))\\r\\n                           (swap\! atom3 \#(+ % (parse-int (subs no-space 4 5))))\\r\\n                           (swap\! atom4 \#(+ % (parse-int (subs no-space 5 6))))\\r\\n                           (swap\! atom5 \#(+ % (parse-int (subs no-space 6 7))))\\r\\n                           (swap\! atom6 \#(+ % (parse-int (subs no-space 7 8))))\\r\\n                           (swap\! atom7 \#(+ % (parse-int (subs no-space 8 9))))\\r\\n                           (swap\! atom8 \#(+ % (parse-int (subs no-space 9 10))))\\r\\n                           ))" "@atom8" "@atom4" "(start-server)" "(use 'total.algorithm)" "(values)" "(vectors-in-file)" "(values)" "@atom1" "@atom2" "@atom5" "@atom6" "@atom8" "(parse-int @atom1)" "@atom1" "(parse-int (str @atom1))" "(max (parse-int (str @atom1)) (parse-int (str @atom2))(parse-int (str @atom3))(parse-int (str @atom4))(parse-int (str @atom5))\\n     (parse-int (str @atom6))(parse-int (str @atom7))(parse-int (str @atom8)))" "(def atom3 \\r\\n    \\"Defines sum of scores of each artist for third user\\"\\r\\n  (atom 10))" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)"]
eclipse.preferences.version=1
